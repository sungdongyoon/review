DOM 활용

모든 HTML태그는 요소 노드가 된다
HTML태그에서 사용하는 텍스트 내용은 자식노드가 된다
HTML태그에서 속성은 모두 자식노드가 된다

querySelector() : 단일 요소를 선택
querySelectorAll() : 복수 요소를 선택

노드리스트
<body>
  <h1>노드 리스트 살펴보기</h1>
  <p>HTML</p>
  <p>CSS</p>
  <p>JAVASCRIPT</p>
</body>

document.querySelectorAll('p');
document.querySelectorAll('p')[1];
=	<p>​CSS​</p>​
document.querySelectorAll('p')[0];
=	<p>HTML</p>



기존에 없던 새로운 노드를 만들어서 추가하고 싶은 경우

document.createElement(생성하고 싶은 요소명 = 태그명);
document.createTextNode(생성하고 싶은 텍스트);
부모노드.appendChild(자식노드);



let newP = document.createElement("p");
let textNode = document.createTextNode("Typescript");
newP.appendChild(textNode);
"Typescript"
document.body.appendChild(newP);
<p>​Typescript​</p>​
----------------------------------------------------------------------------------------
주문하기 버튼 클릭시, 주문하기 아래 영역에 상품명을 출력하기

<body>
  <div id="container">
    <h1>상품설명</h1>
    <h2>2023신상 에어맥스 풀파워</h2>
    <p>최신 에어폼 탑재</p>
    <p>트렌디한 컬러 및 디자인</p>
    <button id="order">주문하기</button>
  </div>
  <div id="orderInfo"></div>
</body>


// 1. 주문하기라는 버튼 정의
// 2. 아래에 내용이 나와야하는 출력공간 정의
// 3. 출력공간에 보여줄 컨텐츠 정의

const orderBtn = document.querySelector("#order");
const orderInfo = document.querySelector("#orderInfo");
const title = document.querySelector("h2");

orderBtn.addEventListener("click", () => {
  let newP = document.createElement("p");
  newP.style.fontSize = "0.8em"
  newP.style.color = "blue";
  let textNode = document.createTextNode(title.innerText);
  newP.appendChild(textNode);
  orderInfo.appendChild(newP);
}, {once : true})
----------------------------------------------------------------------------------------
createElement() : 요소(태그) 노드 만들기
createTextNode() : 텍스트 노드 만들기
appendChild() : 부모요소에 자식요소로 연결하기
createAttribute() : 속성 노드 만들기
setAttributeNode() : 속성 노드 연결하기


let newImg = document.createElement("img");
let srcNode = document.createAttribute("src");

srcNode.value = "/img/tree-3.jpg";
'/img/tree-3.jpg'

newImg.setAttributeNode(srcNode);

document.body.appendChild(newImg);
<img src=​"/​img/​tree-3.jpg">​

----------------------------------------------------------------------------------------
시간 변화에 따른 이미지 변화
<body>
  <div id="container">
    <h1>Enjoy Your Life</h1>
  </div>
</body>


// 1. 시간(오전/오후)에 대한 개념정의
// 2. 시간변화에 따라서 출력해줘야하는 이미지가 어떤것인지에 대한 정의 > 시간 변화 정의 -> 이미지 정의
// 3. 이미지 출력할 공간에 대한 정의

const container = document.querySelector("#container");
//시간 정의
const today = new Date();
const hrs = today.getHours();
//이미지 정의
let newImg = document.createElement("img");
//시간에 따른 이미지 정의
newImg.src = (hrs < 12) ? "/img/morning.jpg" : "/img/afternoon.jpg";

container.appendChild(newImg);
----------------------------------------------------------------------------------------
노드를 만들어서 자녀요소로 추가
> 가장 마지막 영역에 추가
> appendChild(자녀요소) : 부모요소에 가장 마지막 위치로 자녀를 편입시킴

*기존 노드의 앞에 새 요소로 추가하고자 할 때 사용하는 메서드 함수
>insertBefore(앞에 추가하고자 하는 요소, 기준점이 되는 요소);

----------------------------------------------------------------------------------------
텍스트 추가 버튼 클릭시, 'JAVASCRIPT'텍스트 앞에 'Typescript'라는 단어가 추가되도록 작성

<body>
  <h1>노드 리스트 살펴보기</h1>
  <p>HTML</p>
  <p>CSS</p>
  <p>JAVASCRIPT</p>
  <button>텍스트추가</button>
</body>

button {
  display: block;
}


const button = document.querySelector("button");
const jsP = document.querySelectorAll("p")[2];

let newP = document.createElement("p");
let newText = document.createTextNode("Typescript");
newP.appendChild(newText);

button.addEventListener("click", () => {
  document.body.insertBefore(newP, jsP);
});


----------------------------------------------------------------------------------------
- 노드 삭제하는 메서드
> remove() :

삭제하고자하는 요소.remove();


<body>
  <h1>Web Programming</h1>
  <p>HTML</p>
  <p>CSS</p>
  <p>JAVASCRIPT</p>
</body>


const title = document.querySelector("h1");

title.addEventListener("click", () => {
  title.remove();
});


remove() : 선택된 요소 및 노드 자체를 삭제한다

removeChild() : 선택된 요소 및 노드의 자녀노드를 삭제한다

*부모 노드를 찾는 프로퍼티(=속성)
자녀노드.parentNode => 해당 자녀 노드의 부모노드를 찾는다

부모노드.removeChild(자녀노드)
>>부모노드의 자녀노드를 삭제

----------------------------------------------------------------------------------------
선택된 요소만 삭제

<body>
  <h1>Web Programming</h1>
  <ul id="items">
    <li>HTML</li>
    <li>CSS</li>
    <li>JAVASCRIPT</li>
  </ul>
</body>


const items = document.querySelectorAll("li");

for(item of items) {
  item.addEventListener("click", () => {
    this.parentNode.removeChild(this);
  });
};
>>>>>>>>>>>>>>>>> X


const items = document.querySelectorAll("li");

for(item of items) {
  item.addEventListener("click", function() {
    this.parentNode.removeChild(this);
  });
};
>>>>>>>>>>>>>>>>> O

화살표함수가 만능은 아니다
밑에 보면
화살표함수는 실행이 안됨


화살표 함수는 중복되어야하는 요소나 this객체를 사용할때는 사용 x

----------------------------------------------------------------------------------------
선택된 요소만 삭제

<body>
  <div id="cart">
    <h1>학습언어</h1>
    <div id="products">
      <p><span>&cross;</span> HTML5+CSS3+JAVASCRIPT</p>
      <p><span>&cross;</span> React</p>
      <p><span>&cross;</span> Typescript</p>
    </div>
  </div>
</body>


* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
#cart {
  margin: 50px auto;
  width: 600px;
  padding: 10px 20px;
}
#cart h1 {
  margin-bottom: 20px;
}
#products p {
  font-size: 1.2em;
  line-height: 3;
}
p span {
  color: #ccc;
  margin-right: 0.8em;
  font-size: bold;
}
p span:hover {
  color: crimson;
  cursor: pointer;
}



const delBtn = document.querySelectorAll("span");

for(item of delBtn) {
  item.addEventListener("click", function() {
    this.parentNode.remove(this);
  });
};


const delBtn = document.querySelectorAll("p");

for(item of delBtn) {
  item.addEventListener("click", function() {
    this.parentNode.removeChild(this);
  });
};


어떤 선택자를 잡았냐에 따라 살짝 다름
결과는 같다

----------------------------------------------------------------------------------------
BookList 프로그램 개발을 위해 필요한 정의 요소

1. 제목, 저자에 대한 데이터공간 및 정의
2. 취소하기 및 저장하기 버튼 내용 정의
3. 삭제하기 버튼 내용 정의
4. 입력된 데이터가 출력되 공간에 대한 정의


<body>
  <div id="container">
    <h1>Book List</h1>
    <form action="">
      <ul id="bookInfo">
        <li>
          <label for="title">제목</label>
          <input type="text" id="title">
        </li>
        <li>
          <label for="author">저자</label>
          <input type="text" id="author">
        </li>
      </ul>
      <button type="reset">취소하기</button>
      <button id="save">저장하기</button>
    </form>
    <ul id="bookList"></ul>
  </div>
</body>


* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
#container {
  margin: 50px auto;
  width: 600px;
  padding: 10px 20px;
}
li {
  list-style: none;
}
#bookInfo {
  margin-top: 40px;
}
#bookInfo li {
  font-size: 1em;
  line-height: 3;
}
#bookInfo label {
  display: inline-block;
  width: 50px;
}
#bookInfo input {
  width: 450px;
  padding: 5px;
}
button {
  width: 150px;
  margin: 20px 55px;
  font-size: 1em;
  padding: 5px 10px;
}
#bookList {
  width: 500px;
  margin-top: 80px;
  position: relative;
}
#bookList li {
  position: relative;
  border-bottom: 1px solid #ccc;
  padding: 10px;
  font-size: 1em;
}
.delButton {
  position: absolute;
  right: 10px;
  padding: 5px 10px;
  font-size: 0.8em;
}



let title = document.querySelector("#title");
let author = document.querySelector("#author");
const save = document.querySelector("#save");
const bookList = document.querySelector("#bookList");

save.addEventListener("click", (e) => {
  e.preventDefault();

  const item = document.createElement("li");
  item.innerHTML = `
  ${title.value} - ${author.value}
  <span class="delButton">삭제</span>
  `;
  bookList.appendChild(item);
  title.value = "";
  author.value = "";

  const delButtons = document.querySelectorAll(".delButton");

  for(let delButton of delButtons) {
    delButton.addEventListener("click", removeItem);
  }
})

function removeItem() {
  let list = this.parentNode;
  list.parentNode.removeChild(list);  
};

----------------------------------------------------------------------------------------
참가자 명단

1. 이름 및 전공 데이터 보관 / 내용 정의값
2. 등록하기 버튼 기능 정의
3. 내용 출력공간 정의



<body>
  <div id="container">
    <h1>참가자 명단</h1>
    <form>
      <ul id="userInput">
        <li>
          <label for="usrName">이 름</label>
          <input type="text" id="userName">
        </li>
        <li>
          <label for="major">전 공</label>
          <input type="text" id="major">
        </li>
      </ul>
      <button>등록하기</button>
    </form>
    <table id="attendant">
      <thead>
        <tr>
          <th>이 름</th>
          <th>전 공</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>
</body>


#container {
  width: 400px;
  margin: 10px;
}
#userInput {
  list-style: none;
  width: 400px;
}
#userInput label {
  width: 50px;
  margin-right: 10px;
  line-height: 30px;
}
#userInput input {
  width: 200px;
  height: 30px;
  margin-bottom: 10px;
}
button {
  width: 300px;
  padding: 15px;
}
table {
  border: 1px solid #ccc;
  margin-top: 10px;
  border-collapse: collapse;
}
th, td {
  border: 1px solid #ccc;
  padding: 10px;
  width: 128px;
}


let userName = document.querySelector("#userName");
let major = document.querySelector("#major");
const btn = document.querySelector("button");


btn.addEventListener("click", function(e) {
  e.preventDefault();

  let tbody = document.querySelector("tbody");
  let newTr = document.createElement("tr");

  let nameTd = document.createElement("td");
  nameTd.innerText = userName.value;
  userName.value = "";

  let majorTd = document.createElement("td");
  majorTd.innerText = major.value;
  major.value = "";

  newTr.appendChild(nameTd);
  newTr.appendChild(majorTd);
  tbody.appendChild(newTr);
})
----------------------------------------------------------------------------------------
버튼 누르면 텍스트 나타나고 3초뒤에 사라지게
<body>
  <div id="result"></div>
  <button>클릭</button>
</body>


* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
body {
  display: flex;
  justify-content: center;
  align-content: center;
  margin: 0;
}
button {
  background-color: #ddd;
  padding: 1rem 3rem;
  border: 1px solid #222;
  border-radius: 5px;
}
/* p {
  margin-top: 30px;
  width: 150px;
  height: 60px;
  line-height: 60px;
  border: none;
  background-color: #ccc;
  border-radius: 20px;
  text-align: center;
  color: #fff;
} */
#result {
  position: fixed;
  top: 20px;
  right: 20px;
}
.resu {
  background-color: #eee;
  border-left: 3px solid #222;
  padding: 1rem;
  margin: 1rem;
}





// const button = document.querySelector("button");
// const result = document.querySelector("#result");


// button.addEventListener("click", () => {
//   const newP = document.createElement("p");
//   newP.innerText = "안녕하세요";
//   result.appendChild(newP);

//   function delP() {
//     newP.remove();
//   }
//   setTimeout(delP, 3000);
// });

const button = document.querySelector("button");
const result = document.querySelector("#result");

button.addEventListener("click", () => {
  const resu = document.createElement('div');
  resu.classList.add('resu');
  resu.innerText = "항상 응원합니다";
  result.appendChild(resu);

  setTimeout(() => {
    resu.remove();
  }, 3000)
})


주석처리는 내가 한 방식
다른건 강사님 방식
============================================================================
내장객체 활용