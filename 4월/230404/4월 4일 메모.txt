****오늘 내용 꽤 많이 중요*****
에이블디 공식 블로그 자바스크립트 내용 괜찮은듯

프로토타입과 인스턴스

프로토타입 = 하나의 예시, 템플릿
자주사용하는 것을 하나의 객체로 만들어 놓은것
붕어빵 만드는것처럼 복제품을 만들어낸다
프로토타입으로 만든 복제품들을 인스턴스라고 부른다



프론트엔드 포트폴리오는 html, css보다 js로 화면구성하는게 좋다

포트폴리오에서
모달, 슬릭슬라이더를 js 하드코딩으로 만드는게 진짜 실력
플러그인은 많이 안쓰는 것이 좋다
=================================================================
let book = {
  title : "자바스크립트",
  author : "윤동성",
  pages : 500,
  price : 15000
}
* 변수 : 숫자형, 문자열, 논리형, 객체, 함수 등...
* 객체 : 속성 / 메서드

객체의 속성을 사용하는 방법
> 객체 이름 뒤에 마침표 찍고 속성 이름 입력

객체의 메서드를 사용하는 방법
> 객체 이름 뒤에 마침표 찍고 메서드 이름 + () 입력
=================================================================

사용자 정의 객체 만들기

1) 리터럴 표기법
> 리터럴 : 프로그래밍을 할 때, 자료를 표기하는 방식
> 변수를 선언함과 동시에 변수 안에 객체의 값을 지정해주는 표기 방식 => 리터럴 표기법

//리터럴 표기법

let book = {
  title: "자바스크립트",
  author: "윤동성",
  pages: 500,
  price: 15000,
  info: function () {
    alert(this.title + "책의 분량은" + this.pages + "쪽 입니다.");
  },
};
book대신 this 사용 이유 : 함수의 재활용성 때문.
		        book이 한개면 상관없는데 여러개일경우 다른 함수와 겹쳐서 작동이 안된다	


2) 생성자 함수
> 객체를 만들어내는 함수를 선언하고, 그 함수를 활용해서 객체를 생성 및 운영하는 방법

function book(title, author, volume, price) {
  this.title = title;
  this.author = author;
  this.volume = volume;
  this.price = price;
}

let html = new book("자바스크립트", "Yoon", "600", "28,000");
let css = new book("스타일코딩", "Kim", "365", "16,000");
let phython = new book("파이썬코딩", "lee", "480", "24,000");

let bookList = [html, css, phython];

document.write("<h1>책 제목으로 살펴보기</h1>");
for (let i = 0; i < bookList.length; i++) {
  document.write("<p>" + bookList[i].title + "</p>");
}



=================================================================
리터럴 표기법, 이 개념의 확장으로 많은 것을 만든다

<body>
    <div id="display"></div>
  </body>

let toyRobot = {
  productId: "2023-04-04",
  name: "Robot_1",
  price: "25,000",
  madeIn: "Korea",
  quantity: 10,
  showStock: function () {
    document.querySelector("#display").innerHTML =
      this.name + "제품은 " + this.quantity + "개 남았습니다.";
  },
};

toyRobot.showStock();
=================================================================
방대한 데이터가 있을때 프로토타입을 활용

function TestScore(name, kor, eng) {
  this.userName = name;
  this.korNum = kor;
  this.engNum = eng;

  //this 대신 testscrore.prototype 사용
  TestScore.prototype.getTestInfo = function () {
    document.write("이름: " + this.userName + "<br/>");
    document.write("국어: " + this.korNum + "<br/>");
    document.write("영어: " + this.engNum + "<br/>");
  };
  //this 대신 testscrore.prototype 사용
  TestScore.prototype.getAvg = function () {
    return (this.korNum + this.engNum) / 2;
  };
}

let kimgun = new TestScore("김군", 80, 90);
let ohgun = new TestScore("오군", 100, 80);

kimgun.getTestInfo();
document.write(`평균점수: ${kimgun.getAvg()}`, "<br/><br/>");

ohgun.getTestInfo();
document.write(`평균점수: ${ohgun.getAvg()}`, "<br/><br/>");
=================================================================
여행준비물 점검목록

1. 데이터가 어딘가에는 저장
2. 저장된 데이터가 시각적으로 표현 > html
3. 삭제 시 데이터가 사라져야 한다


<body>
    <div id="wrap">
      <h2>여행 준비물 점검 목록</h2>
      <form>
        <input type="text" id="item" autofocus="true" />
        <button id="add" class="addBtn">추가</button>
      </form>
      <div id="itemList"></div>
    </div>
  </body>




let itemList = [];

let addBtn = document.querySelector("#add");
addBtn.addEventListener("click", addList);

function addList(event) {
  event.preventDefault();
  let item = document.querySelector("#item").value;
  if (item != null) {
    itemList.push(item);
    document.querySelector("#item").value = "";
    document.querySelector("#item").focus();
  }
  showList();
}

function showList() {
  let list = "<ul>";
  for (let i = 0; i < itemList.length; i++) {
    list +=
      "<li>" + itemList[i] + "<span class='close' id=" + i + "> X </span></li>";
  }
  list += "</ul>";

  document.querySelector("#itemList").innerHTML = list;

  let remove = document.querySelectorAll(".close");
  for (let i = 0; i < remove.length; i++) {
    remove[i].addEventListener("click", removeList);
  }
}

function removeList() {
  let id = this.getAttribute("id");
  itemList.splice(id, 1);
  showList();
}
=================================================================
문서객체모델 : html안에 들어가는 모든요소

<h1>안녕하세요 ==> 텍스트 노드</h1>
.h1 {
   color: red;  ==> 속성 노드
}
=================================================================

querySelector("#detail")
getElementById("detail")

<유의사항>
getElementById => Elements 가운데 적용되어있는 메서드 함수의 경우
태그 노드까지만 스타일을 적용할 수 있습니다.

querySelector => 속성노드 및 텍스트 노드까지 접근 가능하며
스타일 및 기타 요소 편집이 가능합니다.

querySelector가 훨씬 더 폭넓게 사용 가능

=================================================================

getAttribute() : 속성값을 알기 위한 함수
setAttribute() : 속성값을 변경하기 위한 함수
addEventListener() : 한 요소에 여러 이벤트가 발생했을 때, 동시에 처리할 수 있는 이벤트 함수


=================================================================
사진 바꾸기
<div id="container">
      <img src="/img/girl.png" alt="" id="pic" />
    </div>


let pic = document.querySelector("#pic");
pic.addEventListener("mouseover", changePic);
pic.addEventListener("mouseout", originPic);

function changePic() {
  pic.src = "/img/boy.png";
}
function originPic() {
  pic.src = "/img/girl.png";
}
