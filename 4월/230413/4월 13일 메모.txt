========================================================================================
제어문

* if문
* else문
* else if문

* for문
* for of문
* for in문

* while문
* do while문
* switch문

* continue문
* break문



조건문에서 중괄호 언제 생략?

if(userInfo !== null) alert(userInfo);

1) false 값을 설정하지 않은 경우
2) 줄코딩을 할 수 있을 만큼 간단한 조건식의 경우



if (num1 < num2) {
  small = num1;
} else {
  small = num2;
}
이러한 불편함을 해소하기 위해

삼항조건연산자 사용

조건 ? true일때 실행할 명령문 : false일때 실행할 명령문




-----------------------------------------------------------
const num1 = parseInt(prompt("첫 번째 정수 : "));
const num2 = parseInt(prompt("두 번째 정수 : "));
let str;

if(num1 % 2 === 0 && num2 % 2 === 0) {
  str = "두 수 모두 짝수입니다"
} else {
  str = "짝수가 아닌 수가 있습니다"
};

alert(str);
-----------------------------------------------------------


forEach() : 배열 객체에서 각각의 요소들을 꺼내서 반복시키고자 할때

forEach(콜백함수)
> 콜백함수 : 다른 함수의 인자값으로 사용되는 함수를 의미
> 인자값 = 인수 : 매개변수의 값으로 적용될 값
> 매개변수 : function("매개변수") => 함수가 작동하기 위해서 존재해야하는 값

--------------------------------------------------------------------------------------------
for in문 : 일반객체에서 객체값안에 있는 프로퍼티( key : value )를 가져와서 반복시킬 때
for(변수 in 객체명)

const bookInfo = {
  title : "자바스크립트",
  pubDate : "2023-04-12",
  pages : 272,
  finished : true
}

for(key in bookInfo) {
  document.write(`${key} :${bookInfo[key]}<br />`);
}
---->key 변수 자리에 i 많이 사용


============================================================
4월 12일 내용 이어서
============================================================
블로그, 깃허브에
공부한것 정리하는 습관 꼭


포폴에 내가 할줄아는것에대해 증명해야함
공부한 것을 기반으로 무엇을 했나
추상적인말 x
============================================================
forEach : 배열객체 > 아이템 요소 반복

for in : (변수 in 객체)
>일반객체에서 객체의 값을 가져와서 반복처리할 때 주로 사용

for of : 문자열 혹은 배열객체에서 반복가능한 반복분
>배열객체에서 각각의 변수값을 가져와서 반복처리할 때 주로 사용 = forEach

----------------------------------------------------------------------------------------

while : 조건이 참인 경우 문장을 반복
while(조건) {
   실행할 명령
}


do while : 참, 거짓 여부와 상관없이 무조건 1회 반복 후 조건식을 참고
do {
   실행할 명령
} while (조건)


let stars = parseInt(prompt("별의 개수 : "));

while (stars > 0) {
  document.write("*");
  stars--;
};

do {
  document.write("*");
  stars--;
} while(stars > 0)

----------------------------------------------------------------------------------------

반복문

> break문 : 반복문을 강제 종료

> continue문 : 특정조건에 해당되는 값을 만났을 때, 실행하던 반복 문장을 건너뛴다




----------------------------------------------------------------------------------------
소수 판별 프로그램

const number = parseInt(prompt("숫자를 입력하세요"));
let isPrime;

/* 숫자 1은 소수도 아니고 합성수도 아니다 */
/* 숫자 2는 소수입니다 */
if(number === 1) {
  document.write(`${number}은 소수도 합성수도 아닙니다`)
} else if(number === 2) {
  isPrime = true;
} else {
  for (let i = 2; i < number; i++) {
    if (number % i === 0) {
      isPrime = false;
      break;
    } else {
      isPrime = true;
    }
  }
} 

if (isPrime) {
  document.write(`${number}는 소수입니다`)
} else {
  document.write(`${number}는 소수가 아닙니다`)
}
----------------------------------------------------------------------------------------
주어진 배열에서 10보다 큰 수를 출력
배열 = 1,3,5,7,9,11,13,15,17,19

let number = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19];

for(let i = 0; i < number.length; i++) {
  if(number[i] > 10) {
    document.write(`${number[i]} `)
  }
}

-----------------------------------------------------------------------------------------
사용자로부터 1보다 큰 숫자를 입력받고
입력한 숫자까지 짝수만 더해서 화면에 출력하는 프로그램


let n = parseInt(prompt("1보다 큰숫자 입력"));
let sum = 0;

if(n !== null && n > 1) {
  for(let i = 1; i <= n; i++) {
    if(i % 2 == 1) {
      continue;
    } else {
      sum += i;
      document.write(`${i} ----- ${sum} <br/>`)
    }
  }
}
-----------------------------------------------------------------------------------------
===========================================================
함수

변수 : 바구니
객체 : 다양한 정보들의 집합체
함수 : 여러개의 명령들을 묶어놓은 것

함수를 사용해야하는 이유
>> 사용자의 요구사항이 천차만별 

함수의 생김새
함수 => 함수이름 ()

함수생성 = 함수선언
객체생성 = 객체선언

생성한 함수는 호출해야함

function 함수명() {
   실행명령문
}

사용자로 하여금 특정값을 받아서 함수를 실행시키고자 할 때 매개변수가 필요

매개변수에 전달될 값 = 인수 혹은 인자값

function sum(매개변수) {

}

------------------------------------------------------------
function calcSum() {
  let sum = 0;
  for(let i = 1; i <= 10; i++) {
    sum += i;
  }
  console.log(`1부터 10까지 더하면 ${sum} 입니다`)
}

calcSum();
************ 효율적이지 못한 함수

>>>>>>>>>>>>>>>>>>>>>>>>>>>>
function calcSum(n) {
  let sum = 0;
  for(let i = 1; i <= n; i++) {
    sum += i;
  }
  console.log(`1부터 ${n}까지 더하면 ${sum} 입니다 `)
}

calcSum(5);
*************** 이렇게 사용 가능
------------------------------------------------------------

function calcSum(n) {
  let sum = 0;
  for(let i = 1; i <= n; i++) {
    sum += i;
  }
  return sum;
}

let num = parseInt(prompt("몇까지 더할까요"));
document.write(`1부터 ${num}까지 더하면 ${calcSum(num)}`);

return문은 함수안에서는 함수를 종료시키고
함수 밖에서는 반환


------------------------------------------------------------
사용자에게 두 수를 받아서
해당 수를 곱하고 그 결과값을 반환하는 함수를 만들기
그리고 그 결과값을 화면에 출력

let first = parseInt(prompt("a값을 입력"));
let second  = parseInt(prompt("b값을 입력"));

function result(a, b) {
  let multi = a * b;
  return multi;
};

document.write(`두 수를 곱한 결과는 ${result(first, second)}`);

------------------------------------------------------------
매개변수 기본값 지정하는 방법
입력값을 빼먹어도 기본값을 지정해놓으면 그 값이 실행
우선순위는 입력값, 입력값이 없으면 지정값이 실행된다

function multiple(a, b=5, c=10) {
  return a * b + c;
}

console.log(multiple(5, 10, 20));
console.log(multiple(10, 20));
console.log(multiple(10));

------------------------------------------------------------

디버그(디버깅) : 프로그램이 개발자의 기획대로 움직이지 않을때, 그 문제점이나 오류(*버그)를 찾는 작업

ctrl + shift + i눌러서 하면 좋음
------------------------------------------------------------
함수 스코프 = 적용범위
> 어떠한 함수가 영향을 미칠 수 있는 적용범위

1) 지역스코프(local)
> 지역변수

2) 전역스코프(global)
> 전역변수

전역변수를 사용하는 방법
1. 코드를 작성할 때 가장 최상단에 변수를 선언하고 값을 할당한다

2. 함수안에 변수를 작성할 때 변수를 정의하는 키워드 = 예약어를 생략한다

3) 블록스코프

const factor = 5;

function calc(num) {
  return num * factor;
}

{
  let result = calc(10);
  document.write(`result : ${result}`);
}

------------------------------------------------------------
let, var, const의 차이점을 확실하게 알아두기
------------------------------------------------------------

** 익명함수
> 함수명을 지정하지 않은 함수

let sum = function(a, b) {
}

const sum = function(a, b) {
}


자바스크립트 함수 => 1급 함수

함수를 익명으로 선언
함수를 변수값으로 할당



** 즉시실행함수
> 함수를 정의하면서 동시에 실행시키는 함수

즉시실행함수 형태
(function() {

}, (인자값))




** 화살표함수

1. 매개변수가 없을때

let hi = function() {
   return `안녕하세요`;
}

>>>>>화살표 함수

let hi = () => {
    return `안녕하세요`;
}

>>>>>>>더 간략하게 하면

let hi = () => `안녕하세요`;


2. 매개변수가 하나일때

let hi = function(user) {
  console.log(`${user}님, 안녕하세요`);
}

>>>>>>>>>간략하게 하면

let hi = user => console.log(`${user}님, 안녕하세요`);

3. 매개변수가 2개 이상일때
let sum = function(a, b) {
   return a + b;
}
sum(10, 20);

>>>>>>>>간략하게 하면

let sum = (a, b) => a + b;
sum(10, 20);

** 콜백함수
> 함수안에 인수가 되는 또다른 함수

const btn = document.querySelector("button");

function display() {
  alert("클릭했습니다");
}

btn.addEventListener("click", display);
----> addEventListener()안에있는 display가 콜백함수이다.

==================================================

const btn = document.querySelector("button");

 function display() {
   alert("클릭했습니다");
 }

btn.addEventListener("click", display);

>>간략하게

btn.addEventListener("click", () => {
  alert("클릭");
});


-------------------------------------------------------------------------
두가지 값을 받아서
익명함수를 사용

let first = parseInt(prompt("첫번째 값"));
let second = parseInt(prompt("두번째 값"));


let result = (a, b) => a * b;

document.write(`${result(first, second)}`);
-------------------------------------------------------------------------
function showData(name, age) {
  alert(`안녕하세요 ${name}님, 나이가 ${age}살 이군요`);
}

function getData(callback) {
  let userName = prompt("이름 입력");
  let userAge = parseInt(prompt("나이 입력"));
  callback(userName, userAge);
}

getData(showData);
-------------------------------------------------------------------------

전개구문방식

function addNum(...numbers) {
    let sum = 0;
    for (let number of numbers)
        sum += number;

    return sum;
}

console.log(addNum(1, 3));
console.log(addNum(1, 3, 5, 7));

-------------------------------------------------------------------------

setInterval()
> setInterval(콜백함수, 시간);
> 일정한 시간마다 함수를 반복해서 실행하는 함수
> 자바스크립트는 밀리초 사용. 1000밀리초 = 1초

function greeting() {
  console.log("안녕하세요");
}

setInterval(() => {
  console.log("안녕");
}, 1000);

-------------------------------------------------------------------------
// function greeting() {
//   console.log("안녕하세요");
// }

let timer = setInterval(() => {
  console.log("안녕");
}, 1000);

clearInterval(timer);

-------------------------------------------------------------------------

콘솔창에 "안녕하세요" 라는 인사말을 5번 표시하고 자동으로 멈추는 프로그램 생성

let counter = 0;

let greeting = setInterval(() => {
  console.log("안녕하세요");
  counter++;
  if(counter === 5) {
    clearInterval(greeting);
  }
}, 2000);

-------------------------------------------------------------------------
setTimeout() : 일정시간 이후에 콜백함수 실행
>setTimeout(콜백함수, 시간)

setTimeout(()=>{
  console.log("안녕하세요")
}, 3000);
-------------------------------------------------------------------------
사용자에게 숫자를 받아서
해당 숫자를 함수로 넘겨줍니다
그리고 해당 함수에서 숫자가 양수인지, 음수인지
또는 0인지 판단해서 알림창을 통해 알려주는 프로그램 생성

isNan(매개변수) : 매개변수가 숫자인지 아닌지를 검사하는 함수
매개변수가 숫자가 아니면 true


const number = parseInt(prompt("숫자를 입력하세요"));

if(!isNaN(number)) {
  ispositive(number);
}

function ispositive(number) {
  if (number > 0) {
    alert(`${number}는 양수입니다`);
  } else if (number < 0) {
    alert(`${number}는 음수입니다`);
  } else {
    alert(`0입니다`);
  }
};













