문자열 / 배열

배열 => 순서 / 중간 요소 수정, 편집 가능

배열을 변형하는 메서드 함수

1) map() : 배열 요소에 동일한 함수를 적용하고자 할 때

<<사용법>>
- map(함수(값))
- map(함수(값, 인덱스))

let numbers = [1, 2, 3, 4, 5];
let newNumbers = numbers.map(number => number * 2);
newNumbers;
> (5) [2, 4, 6, 8, 10]
let newNumbers2 = numbers.map((number, index) => index + (number * 3));
newNumbers2;
> (5) [3, 7, 11, 15, 19]

2) firlter() : 배열 요소에 특정한 조건식을 부여해서 해당 값을 추출하고자 할 때

<<사용법>>
- filter(함수(값))
- filter(함수(값, 인덱스))

let scores = [90, 35, 64, 88, 45, 92];
let highScore2 = scores.filter((score, index) => {
    if(score >= 85) {
        console.log(`index : ${index}, score : ${score}`)
        return score;
    }
});
> index : 0, score : 90
index : 3, score : 88
index : 5, score : 92

let highScore3 = scores.filter(score => score >= 85);
highScore3;
> (3) [90, 88, 92]

3) reduce() : 배열 요소에 특정 콜백함수를 실행해서 최종적인 하나의 결과값을 만들어낼 때
(누산기 기능을 구현할 때 사용)

<<사용법>>
- reduce(함수(누산기, 현재값, 인덱스, 원래배열), 초기값)
=> 필수입력사항 : 누산기, 현재값
=> 비필수입력사항 & 입력권장 : 초기값 (초기값 설정 안하면 배열 첫번째 값이 자동으로 들어간다, 정확한 값을 구현하려면 입력하는게 좋음)

let numbers = [1, 2, 3, 4, 5];
let result = numbers.reduce((total, current) => total + current, 0);
result;
> 15



*** Map & Set
>객체와 배열의 좋은점만 추출한 자료형태


객체의 단점 :
1) 객체의 프로퍼티에는 순서가 존재하지 않는다 > for문을 활용해서 특정 구간을 반복하는데 어려움 혹은 제약

2) 객체는 프로퍼티의 개수를 알려주는 속성값이 없다

const member = {
    name : "kim",
    age : 25
};
member;
> {name: 'kim', age: 25}

member.length;
> undefined


배열의 단점 :
1) 배열은 프로퍼티가 아닌 단순한 값만 가지고 있다


***** map ***** 
let myCup = new Map ([
  ["color", "white"],
  ["haveHandle", true],
  ["material", "ceramic"],
  ["capacity", "300ml"]
]);

myCup;
>Map(4) {'color' => 'white', 'haveHandle' => true, 'material' => 'ceramic', 'capacity' => '300ml'}
myCup.set("type", "mini");
> Map(5) {'color' => 'white', 'haveHandle' => true, 'material' => 'ceramic', 'capacity' => '300ml', 'type' => 'mini'}

let bag = new Map();
bag.set("color", "red");
> Map(1) {'color' => 'red'}
bag.set("color", "red").set("purpose", "daily");      --->체이닝 기법
> Map(2) {'color' => 'red', 'purpose' => 'daily'}

set메서드로 값을 추가할 수 있다


-------------------------------------------------------------------------------------
Map 데이터 자료형에서 사용할 수 있는 프로퍼티와 메서드

size : 맵 요소의 개수를 알려주는 프로퍼티
set(키, 값) : (키, 값)을 추가해주는 메서드
get(키) : 해당 맵의 키 값을 반환하는 메서드
has(키) : 해당 키가 맵에 있는지 여부에 따라 true 혹은 false값을 반환해주는 메서드
delete(키) : 해당 키가 존재하는 프로퍼티를 삭제
clear() : 맵의 모든 요소를 삭제
keys() : 각 요소의 키만 모아서 반환
values() : 각 요소의 값만 모아서 반환
entries() : 각 요소의 키와 값을 반환

이터러블 = Iterable : 순서대로 처리할 수 있는
-------------------------------------------------------------------------------------

bag;
> Map(3) {'color' => 'red', 'purpose' => 'daily', 'type' => 'mini'}

<<size>>
bag.size
> 3

<<get>>
bag.get("color");
>'red'

<<has>>
bag.has("name");
> false
bag.has("color")
> true

<<delete>
bag.delete("color");
> true
bag
> Map(2) {'purpose' => 'daily', 'type' => 'mini'}

<<clear>>
bag.clear();
> undefined
bag;
> Map(0) {size: 0}

<<keys>>
myCup.keys();
> MpaIterator {'color', 'haveHandle', 'material', 'capacity'}

for(let key of myCup.keys()) {
     console.log(key)
};
> color
haveHandle
material
capacity


for(let value of myCup.values()) {
     console.log(value)
};
> white
true
ceramic
300ml


for(let entry of myCup.entries()) {
      console.log(entry)
};
> (2) [color, white]
(2) [haveHandle, true]
(2) [material, ceramic]
(2) [capacity, 300ml]




Map 단점 : Map데이터 안에 들어가는 요소가 중복이 되더라도 문제가 되지 않는다
때문에 중요한 데이터를 관리하기에 좋지 않다

Map의 단점을 보완하기 위해 나온것이 set

set : 값이 중복될 수 없는 엄격한 자료 관리 가능



let numSet1 = new Set();

numSet1.add("one");
> Set(1) {'one'}

numSet1.add("two");
> Set(2) {'one', 'two'}

numSet1;
> Set(2) {'one', 'two'}

numSet1.add("three").add("four");
> Set(4) {'one', 'two', 'three', 'four'}

numSet1;
> Set(4) {'one', 'two', 'three', 'four'}


let students = new Set();

students.add("홍길동");
> Set(1) {'홍길동'}

students.add("손흥민");
> Set(2) {'홍길동', '손흥민'}

students.add("이강인");
> Set(3) {'홍길동', '손흥민', '이강인'}

students.has("기성용");
> false

students.has("손흥민");
> true

students.delete("홍길동");
> true

students;
> Set(2) {'손흥민', '이강인'}

students.clear();

students;
> Set(0) {size: 0}

students.add("손흥민");
> Set(1) {'손흥민'}

students.add("이강인");
> Set(2) {'손흥민', '이강인'}

students.keys();
> SetIterator {'손흥민', '이강인'}

students.values();
> SetIterator {'손흥민', '이강인'}

students.entries();
> SetIterator {'손흥민' => '손흥민', '이강인' => '이강인'}              ---> 키와 밸류값이 같다



let lang = new Set(["js", "c", "python", "c", "js"]);
for(let el of lang.values()) {
  console.log(el);
}
> js
c
python
!!중복된 값을 하나로만 인식!!
set은 중복된 값을 배제


-------------------------------------------------------------------------------------
신청과목 중복되는값 제외하고 출력하기

<body>
  <div id="container">
    <h1>신청과목</h1>
    <ul>
      <li>이동하 : HTML, CSS</li>
      <li>장유진 : CSS, Javascript, React</li>
      <li>윤동성 : Javascript, Typescript</li>
    </ul>
    <hr />
    <h2>최종신청과목</h2>
    <div id="result"></div>
  </div>
</body>



#container {
  width: 400px;
  margin: 20px auto;
}
hr {
  width: 100%;
  border: 1px dotted #222;
}
ul {
  list-style: none;
}
li {
  font-size: 1rem;
  line-height: 2;
}


const member1 = ["HTML", "CSS"];
const member2 = ["CSS", "Javascript", "React"];
const member3 = ["Javascript", "Typescript"];

const subjects = [...member1, ...member2, ...member3];

const resultList = new Set();
subjects.forEach(subject => {
  resultList.add(subject);
});
// console.log(resultList);

const result = document.querySelector("#result");

result.innerHTML = `
  <ul>
  ${[...resultList].map(subject => `<li>${subject}</li>`).join("")}
  </ul>
`;

//join() : 배열을 문자열로 전환

-------------------------------------------------------------------------------------
*** 이터레이터 객체 & 제네레이터 함수 ***
1. 문자열, 배열, Map, Set = 이터러블 객체(iterable, 순서대로 처리할 수 있는)
- 이터레이터 객체를 프로토타입으로 상속을 받아야지만 이터러블 객체가 될 수 있다
- 이터레이터 객체는 next()메서드를 갖고 있다
next() : 이터러블 객체(문자열, 배열)안에서 처음 실행했을 때는 인덱스 첫번째 값을 호출
next()를 한번 더 실행하면 그 다음 인덱스 값을 호출한다

어떤 값을 호출할 때 한번에 값을 호출하지 않고 순차적으로 값을 호출하고 싶을 때
next()를 사용한다

let arr = [1, 2, 3, 4, 5];
let it = arr[Symbol.iterator]();
it;
> Array Iterator {}

it.next()
> {value: 1, done: false}
it.next()
> {value: 2, done: false}
it.next()
> {value: 3, done: false}
it.next()
> {value: 4, done: false}
it.next()
> {value: 5, done: false}
it.next()
> {value: undefined, done: true}


2. 제너레이터 함수
이터레이터 객체를 뒷받침해주기 위한 함수

생성자 함수는 동일한 프로퍼티 혹은 객체를 다수 생성하고자 할 때
템플릿을 만들어놓고 해당 템플릿을 통해 효율적으로 객체를 만들기 위해

제너레이터 함수 형태

function* 함수명() {
     yield 1;
     yield 2;
     yield 3;
     yield 4;
};

yield : return과 비슷. 끝나면 이터레이터로 넘겨준다

function fnc() {
    console.log("1");
    console.log("2");
    console.log("3")
};

fnc;
> ƒ fnc() {
    console.log("1");
    console.log("2");
    console.log("3")
}

function* gen() {
    yield 1;
    yield 2;
    yield 3;
};

let g1 = gen();

g1.next();
> {value: 1, done: false}

g1.next();
> {value: 2, done: false}

g1.next();
> {value: 3, done: false}

g1.next();
> {value: undefined, done: true}

g1;
> gen {<closed>}


let g2 = gen();

for(let i of g2) console.log(i);
> 1
2
3

let g3 = gen();

g3.next()
for(let i of g3) console.log(i);
> 2
3

=================================================================
경강선 노선

<body>
  <h1>경강선 노선</h1>
  <button>다음 역</button>
  <span id="result">출발</span>
</body>


body {
  display: flex;
  flex-direction: column;
  align-items: center;
}
button {
  width: 150px;
  padding: 10px 20px;
}
button:hover {
  cursor: pointer;
}
#result {
  padding: 20px;
  text-align: center;
  font-weight: bold;
  margin-top: 10px;
}


function* train() {
  yield "판교";
  yield "이매";
  yield "삼도";
  yield "경기광주";
  yield "초월";
  yield "곤지암";
  yield "신둔도예촌";
  yield "이천";
  yield "부발";
  yield "세종대왕릉";
  yield "여주";
}

let gyeonggang = train();

const button = document.querySelector("button");
const result = document.querySelector("#result");


button.addEventListener("click", () => {
  //next()때문에 yield의 다음 값이 출력되는것
  let current = gyeonggang.next();
  //값이 다 끝나면 done이 true로 출력되기때문에 
  //true가 아닐 때는 계속 값을 출력하고 true가 되면 gyeonggang의 값이 비어있기 때문에 종점이 출력되도록 해야한다
  if(current.done !== true) {
    result.innerText = `${current.value}`;
  } else {
    result.innerText = "종점";
    button.setAttribute("disabled", "disabled");
  }
})
=================================================================
로또 번호 생성기

<body>
  <div id="container">
    <h1>로또 번호 생성기</h1>
    <button>클릭</button>
    <div id="result"></div>
  </div>
</body>


#container {
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 100vh;
  justify-content: center;
}
button {
  width: 200px;
  padding: 20px;
  font-size: 1.2em;
}
#result {
  font-size: 2.5em;
  padding: 20px;
  color: red;
}

const result = document.querySelector("#result");
const button = document.querySelector("button");

const luckyNumber = {
  digitCount: 6,
  maxNumber : 45
};

button.addEventListener("click", () => {
  let {digitCount, maxNumber} = luckyNumber;
  let myNumber = new Set();
  for(let i = 0; i < digitCount; i++) {
    myNumber.add(Math.floor((Math.random() * maxNumber) + 1));
  }
  result.innerText = `${[...myNumber]}`;
  })

=================================================================
통신

***********************클라이언트 & 서버**************************

클라이언트 역할 : 서버에 자료를 요청하는 역할
서버 역할 : 클라이언트가 요청한 자료를 회신하는 역할

http/https(프로토콜)
=> 통신규약(앞으로 웹 서버에 클라이언트가 특정 데이터를 요청한다면, 서로 약속한 데이터 형식을 가지고 요청할때만 값을 출력하자)

HTML : 하이퍼 텍스트 마크업 랭귀지
HTTP : 하이퍼 텍스트 트랜스퍼 프로토콜
HTTPS : s는 보안이 강화된 홈페이지

무료 호스팅서비스 도메인주소에는 s가 없다

GET방식 : 서버에 자료를 요청할 때, 사이트 주소 뒤에 자료명을 붙여서 보내는 방식
> 요청하고자 하는 자료가 공공데이터거나 비보안문서 혹은 정보검색용 데이터

POST방식 : 서버에 자료를 요청할 때, 요청 문자 혹은 내용이 도메인 주소에 나타나지 않도록
, body 본문안에 담아서 전송하는 방식


status 상태 메세지

404 Page Not Found

2xx : 성공메세지

4xx : 서버로부터 데이터를 받아오는데 실패
- 404 : 문서를 찾을 수 없을 때(도메인 오타)
- 401 : 문서에 접속할 권한이 없을 때

5xx : 서버 자체 오류가 났을 때
- 500 : 서버 다운(접속량이 급증할때)
- 503 : 서버 자체적으로 데이터를 차단


자바스크립트를 활용해서 외부사이트 데이터를 가져올 예정




************************************JSON**************************************

자바스크립트를 잘 공부해놓으면 이해하기 쉽다
XML = 데이터 자료형식(과거)
JSON = Javascript Object Notation : 자바스크립트 객체 표기법(현재), 자바/C/C++/파이썬 사용 가능

JSON이 XML보다 좋은 이유
1. 용량이 상대적으로 작다
2. 사용할 수 있는 범위가 넓다

json 형태
{
  "name" : "홍길동"
  "major" : "컴퓨터공학"
  "grade" : 2
}

*객체와 JSON 차이점
- key값을 표현할 때 ""여부
- 객체에서는 프로퍼티와 메서드(함수)를 넣을 수 있었고
JSON은 메서드 및 함수를 넣을 수 없다(오직 프로퍼티만)

*유의사항
- JSON에서 key값을 정의할 때, 무조건 ""사용, '' 불가능
- key값을 정의할 때, 원칙적으로 띄어쓰기 가능하지만
실무에서는 아무도 띄어쓰기를 하지 않는다 (대신 언더바 사용)
- JSON에서 value값으로 문자가 온다면, 당연히 ""로 감싼다
- JSON value값에는 또다른 문자열 혹은 배열을 가져올 수 있다

배열객체 넣을 수있다
{
  "name" : "yoon"
  "major" : "computer"
  "grade" : 2,
  "course" : ["HTML", "CSS", "React"]
}

JSON 안에 또다른 JSON 입력 가능
{
  "name" : "yoon"
  "major" : "computer"
  "grade" : 2,
  "course" : {
    "title" : "basic",
    "time" : 500
  }
}


***중요***

<<<<객체를 JSON으로 변환>>>>

let student = {
    name : "홍길동",
    major : "컴퓨터공학",
    grade : 2
};

student;
> {name: '홍길동', major: '컴퓨터공학', grade: 2}

let json = JSON.stringify(student);

json;
> '{"name":"홍길동","major":"컴퓨터공학","grade":2}'


<<<<JSON을 객체로 변환>>>>

let member1 = '{"name" : "홍길동", "age" : 30, "hobby" : "walking"}';

let member_obj = JSON.parse(member1);

member_obj;
> {name: '홍길동', age: 30, hobby: 'walking'}


JSON.stringify() : 객체 -> JSON
JSON.parse() : JSON -> 객체

*************************AJAX**************************
AJAX : Asynchronous JavaScript and XML
= 비동기 자바스크립트와 XML

> 비동기 <-> 동기
비동기 : 요청과 결과가 동시에 일어나지 않는 방식으로 요청과 결과가 동시에 일어나지 않는다.
동기 : 서버에 자료를 요청하고, 요청한 자료가 정상적으로 수신이 되어야지만 페이지 전환 및 이동


웹페이지가 새롭게 로딩되지 않고도 필요한 웹문서를 가져와서 보여주는 것을 AJAX라고 한다
> 자바스크립트 비동기 데이터 처리방식

쉽게말해 비동기는
요청한 결과는 동시에 일어나지 않는다
동기는
요청과 결과가 동시에 이루어 진다


웹클라이언트 & 웹브라우저 & 웹서버

XMLHttpRequest 객체 = XHR 객체

앞으로 웹 서버를 통해 데이터를 가져올 때는 XHR객체를 활용해서 데이터를 가져올것이다

XHR 객체
- 프로퍼티
- 메서드
> open( ) : 어떤 방식으로 사용할지, 어떤 자료가 필요한지, 비동기 처리 여부를 정의하는 메서드
> send( ) : 앞에서 설정한 open( )를 서버로 보내는 메서드

XMLHttpRequest() : 내장객체

open()로 정의했으면 send()를 사용해서 서버에 전송해야함


let xhr = new XMLHttpRequest();
xhr.open("GET", "student.json");
xhr.send();
xhr;


XMLHttpRequest객체
1) 메서드
- open()
- send()

2) 프로퍼티
- readyState : 객체에서 서버로 자료요청 여부 및 자료도착 여부를 알 수 있는 프로퍼티
이 프로퍼티는 숫자가 크게 다섯개로 나온다
0 : 아직 서버한테 자료오청을 안한 상태
1 : 서버한테 자료를 성공적으로 요청한 상태
2 : 서버요청에 대한 응답이 온 상태
3 : 서버에서 자료가 로딩중인 상태
4 : 자료전송이 끝나고 클라이언트가 자료를 사용할 수 있는 상태

- status : 서버와의 통신 상태
2xx
4xx
5xx
(위에 정리)

- responseText : 서버에 요청한 응답이 문자열로 저장된 형태


let xhr = new XMLHttpRequest();
let xhr = new XMLHttpRequest();
xhr.send();
let students = JSON.parse(xhr.responseText);
students;
>{name: '홍길동', major: '컴퓨터공학', grade: 2}

document.getElementById("result").innerHTML = `${students.name} 학생은 ${students.grade}학년입니다.`
> '홍길동 학생은 2학년입니다.'
